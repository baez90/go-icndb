// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "ICNDB sample API for ITB",
    "title": "icndb",
    "version": "0.0.1"
  },
  "basePath": "/api",
  "paths": {
    "/deploy/env": {
      "get": {
        "summary": "Get the deployment environment",
        "operationId": "getDeployEnv",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeployEnvResponse"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Check the health state of the service",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Service is healthy"
          },
          "500": {
            "description": "Service is not healty"
          }
        }
      }
    },
    "/jokes/count": {
      "get": {
        "summary": "Get the count of the available jokes",
        "operationId": "getJokesCount",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountResponse"
            }
          }
        }
      }
    },
    "/jokes/random": {
      "get": {
        "summary": "Get a random joke",
        "operationId": "getRandomJoke",
        "parameters": [
          {
            "type": "string",
            "description": "Name to replace Chuck with in Joke",
            "name": "firstName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name to replace Norris with in Joke",
            "name": "lastName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FactResponse"
            }
          }
        }
      }
    },
    "/jokes/{id}": {
      "get": {
        "summary": "Get the joke with the specified id",
        "operationId": "Get joke by id",
        "parameters": [
          {
            "type": "integer",
            "description": "Joke ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name to replace Chuck with in Joke",
            "name": "firstName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name to replace Norris with in Joke",
            "name": "lastName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/FactResponse"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Get metrics in a Prometheus compatible format",
        "operationId": "prometheusMetrics",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/system/hostname": {
      "get": {
        "summary": "Get the hostname of the system",
        "operationId": "getHostname",
        "responses": {
          "200": {
            "description": "Got hostname",
            "schema": {
              "$ref": "#/definitions/HostnameResponse"
            }
          },
          "500": {
            "description": "Failed to get hostname"
          }
        }
      }
    },
    "/system/ipaddresses": {
      "get": {
        "summary": "Get the IP addresses of the host",
        "operationId": "getIPAddresses",
        "responses": {
          "200": {
            "description": "Got IP addresses",
            "schema": {
              "$ref": "#/definitions/IPAddressesResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CountResponse": {
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer"
        }
      }
    },
    "DeployEnvResponse": {
      "type": "object",
      "properties": {
        "env": {
          "type": "string"
        }
      }
    },
    "FactResponse": {
      "type": "object",
      "required": [
        "joke",
        "categories"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer"
        },
        "joke": {
          "type": "string"
        }
      }
    },
    "HostnameResponse": {
      "type": "object",
      "required": [
        "hostname"
      ],
      "properties": {
        "hostname": {
          "type": "string"
        }
      }
    },
    "IPAddressesResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "ICNDB sample API for ITB",
    "title": "icndb",
    "version": "0.0.1"
  },
  "basePath": "/api",
  "paths": {
    "/deploy/env": {
      "get": {
        "summary": "Get the deployment environment",
        "operationId": "getDeployEnv",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeployEnvResponse"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Check the health state of the service",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Service is healthy"
          },
          "500": {
            "description": "Service is not healty"
          }
        }
      }
    },
    "/jokes/count": {
      "get": {
        "summary": "Get the count of the available jokes",
        "operationId": "getJokesCount",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountResponse"
            }
          }
        }
      }
    },
    "/jokes/random": {
      "get": {
        "summary": "Get a random joke",
        "operationId": "getRandomJoke",
        "parameters": [
          {
            "type": "string",
            "description": "Name to replace Chuck with in Joke",
            "name": "firstName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name to replace Norris with in Joke",
            "name": "lastName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FactResponse"
            }
          }
        }
      }
    },
    "/jokes/{id}": {
      "get": {
        "summary": "Get the joke with the specified id",
        "operationId": "Get joke by id",
        "parameters": [
          {
            "type": "integer",
            "description": "Joke ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name to replace Chuck with in Joke",
            "name": "firstName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name to replace Norris with in Joke",
            "name": "lastName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/FactResponse"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Get metrics in a Prometheus compatible format",
        "operationId": "prometheusMetrics",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/system/hostname": {
      "get": {
        "summary": "Get the hostname of the system",
        "operationId": "getHostname",
        "responses": {
          "200": {
            "description": "Got hostname",
            "schema": {
              "$ref": "#/definitions/HostnameResponse"
            }
          },
          "500": {
            "description": "Failed to get hostname"
          }
        }
      }
    },
    "/system/ipaddresses": {
      "get": {
        "summary": "Get the IP addresses of the host",
        "operationId": "getIPAddresses",
        "responses": {
          "200": {
            "description": "Got IP addresses",
            "schema": {
              "$ref": "#/definitions/IPAddressesResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CountResponse": {
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer"
        }
      }
    },
    "DeployEnvResponse": {
      "type": "object",
      "properties": {
        "env": {
          "type": "string"
        }
      }
    },
    "FactResponse": {
      "type": "object",
      "required": [
        "joke",
        "categories"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer"
        },
        "joke": {
          "type": "string"
        }
      }
    },
    "HostnameResponse": {
      "type": "object",
      "required": [
        "hostname"
      ],
      "properties": {
        "hostname": {
          "type": "string"
        }
      }
    },
    "IPAddressesResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}`))
}
